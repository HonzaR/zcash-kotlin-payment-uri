/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package dev.thecodebuffet.zcash.zip321

import Payment
import PaymentRequest
import RecipientAddress

/**
 * ZIP-321 object for handling formatting options.
 */
object ZIP321 {
    /**
     * Enumerates formatting options for URI strings.
     */
    sealed class FormattingOptions {
        /** Enumerates all payments. */
        object EnumerateAllPayments : FormattingOptions()

        /** Uses an empty parameter index. */
        data class UseEmptyParamIndex(val omitAddressLabel: Boolean) : FormattingOptions()
    }

    /**
     * Transforms a [PaymentRequest] into a ZIP-321 payment request [String].
     *
     * @param request The payment request.
     * @param formattingOptions The formatting options.
     * @return The ZIP-321 payment request [String].
     */
    fun uriString(from: PaymentRequest, formattingOptions: FormattingOptions = FormattingOptions.EnumerateAllPayments): String {
        return when (formattingOptions) {
            is FormattingOptions.EnumerateAllPayments -> renderRequest(from, startIndex = 1, omittingFirstAddressLabel = false)
            is FormattingOptions.UseEmptyParamIndex -> renderRequest(from, startIndex = null, omittingFirstAddressLabel = formattingOptions.omitAddressLabel)
        }
    }

    /**
     * Convenience function to generate a ZIP-321 payment URI for a single recipient with no amount.
     *
     * @param recipient A recipient address.
     * @param formattingOptions The formatting options.
     * @return The ZIP-321 payment URI [String].
     */
    fun request(recipient: RecipientAddress, formattingOptions: FormattingOptions = FormattingOptions.UseEmptyParamIndex(omitAddressLabel = true)): String {
        return when (formattingOptions) {
            is FormattingOptions.UseEmptyParamIndex -> "zcash:".plus(renderParameter(recipient, index = null, omittingAddressLabel = formattingOptions.omitAddressLabel))
            else -> "zcash:".plus(renderParameter(recipient, index = null, omittingAddressLabel = false))
        }
    }

    /**
     * Generates a ZIP-321 payment request [String] from a [Payment].
     *
     * @param payment The payment.
     * @param formattingOptions The formatting options.
     * @return The ZIP-321 payment request [String].
     */
    fun request(payment: Payment, formattingOptions: FormattingOptions = FormattingOptions.EnumerateAllPayments): String {
        return uriString(PaymentRequest(payments = listOf(payment)), formattingOptions = formattingOptions)
    }

    /**
     * Renders a parameter for ZIP-321 payment requests.
     *
     * @param recipient The recipient address.
     * @param index The parameter index.
     * @param omittingAddressLabel Whether to omit the address label.
     * @return The rendered parameter [String].
     */
    private fun renderParameter(recipient: RecipientAddress, index: Int?, omittingAddressLabel: Boolean): String {
        return when {
            index == null && omittingAddressLabel -> ""
            else -> "address=${recipient.value}"
        }
    }

    /**
     * Renders a ZIP-321 payment request [String].
     *
     * @param request The payment request.
     * @param startIndex The start index.
     * @param omittingFirstAddressLabel Whether to omit the address label for the first payment.
     * @return The rendered ZIP-321 payment request [String].
     */
    private fun renderRequest(request: PaymentRequest, startIndex: Int?, omittingFirstAddressLabel: Boolean): String {
        val renderedPayments = request.payments.mapIndexed { index, payment ->
            renderParameter(payment.recipientAddress, index + (startIndex ?: 0) + 1, omittingAddressLabel = index == 0 && omittingFirstAddressLabel)
        }.joinToString("&")
        return "zcash:$renderedPayments"
    }
}
